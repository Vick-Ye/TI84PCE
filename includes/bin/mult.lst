Listing for file "src\mult.asm"
    3 00:0000 -  -  -  -  .list
    4 00:0000 -  -  -  -   .assume ADL=1
    5 00:0000 -  -  -  -   .org userMem-2
    6 D1:A87F EF 7B -  -   .db tExtTok,tAsm84CeCmp
    7 D1:A881 -  -  -  -   
    8 D1:A881 -  -  -  -  ;init
    9 D1:A881 CD 28 08 02  call _HomeUp
   10 D1:A885 CD 10 08 02  call _ClrScrnFull
   11 D1:A889 CD 48 08 02  call _RunIndicOff
   12 D1:A88D ED 6E -  -   ld a,mb
   13 D1:A88F -  -  -  -      ;save flags
   14 D1:A88F F5 -  -  -       push af
   15 D1:A890 FD E5 -  -       push iy
   16 D1:A892 -  -  -  -       
   17 D1:A892 -  -  -  -  main:
   18 D1:A892 F3 -  -  -   di
   19 D1:A893 ED 7D -  -   stmix
   20 D1:A895 3E D1 -  -   ld a,$d1 ;load to of address for z80
   21 D1:A897 ED 6D -  -   ld mb,a
   22 D1:A899 21 00 00 00  ld hl,0
   23 D1:A89D 01 FF 7F 00  ld bc,32767
   24 D1:A8A1 11 10 00 00  ld de,16
   25 D1:A8A5 -  -  -  -  
   26 D1:A8A5 49 CD D5 A8  call.is multiply & $ffff
   27 D1:A8A9 -  -  -  -  
   28 D1:A8A9 ED 7E -  -   rsmix
   29 D1:A8AB -  -  -  -  
   30 D1:A8AB E5 -  -  -   push hl
   31 D1:A8AC D5 -  -  -   push de
   32 D1:A8AD CD E0 1E 02  call _DispHL
   33 D1:A8B1 E1 -  -  -   pop hl
   34 D1:A8B2 D1 -  -  -   pop de
   35 D1:A8B3 E5 -  -  -   push hl
   36 D1:A8B4 D5 -  -  -   push de
   37 D1:A8B5 CD E0 1E 02  call _DispHL
   38 D1:A8B9 E1 -  -  -   pop hl
   39 D1:A8BA D1 -  -  -   pop de
   40 D1:A8BB CD E0 1E 02  call _DispHL
   41 D1:A8BF -  -  -  -  
   42 D1:A8BF -  -  -  -  exit:
   43 D1:A8BF FD E1 -  -   pop iy
   44 D1:A8C1 F1 -  -  -   pop af
   45 D1:A8C2 ED 6D -  -   ld mb,a
   46 D1:A8C4 CD 8C 0D 02  call _GetKey
   47 D1:A8C8 CD 10 08 02  call _ClrScrnFull
   48 D1:A8CC CD 28 08 02  call _HomeUp
   49 D1:A8D0 FD CB 00 AE  res donePrgm, (iy+doneFlags)
   50 D1:A8D4 C9 -  -  -   ret
   51 D1:A8D5 -  -  -  -  
   52 D1:A8D5 -  -  -  -  ;source: https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Multiplication
   53 D1:A8D5 -  -  -  -  ;z80 mode
   54 D1:A8D5 -  -  -  -  ;16 bit signed multiply
   55 D1:A8D5 -  -  -  -  ;call with bc, de = 16 bit signed numbers to multiply
   56 D1:A8D5 -  -  -  -  ;returns   de:hl = 32 bit signed product
   57 D1:A8D5 -  -  -  -  ;corrupts  a
   58 D1:A8D5 -  -  -  -  
   59 D1:A8D5 -  -  -  -  ; de:hl = bc*de
   60 D1:A8D5 -  -  -  -  .assume ADL=0
   61 D1:A8D5 -  -  -  -  multiply:
   62 D1:A8D5 AF -  -  -    xor a
   63 D1:A8D6 67 -  -  -    ld h,a
   64 D1:A8D7 6F -  -  -    ld l,a
   65 D1:A8D8 -  -  -  -  
   66 D1:A8D8 CB 7A -  -    bit 7,d
   67 D1:A8DA CA DF A8 -    jp z,muldpos & $ffff
   68 D1:A8DD ED 42 -  -    sbc hl,bc
   69 D1:A8DF -  -  -  -  muldpos:
   70 D1:A8DF -  -  -  -  
   71 D1:A8DF B0 -  -  -    or b
   72 D1:A8E0 F2 E5 A8 -    jp p,mulbpos & $ffff
   73 D1:A8E3 ED 52 -  -    sbc hl,de
   74 D1:A8E5 -  -  -  -  mulbpos:
   75 D1:A8E5 -  -  -  -  
   76 D1:A8E5 3E 10 -  -    ld a,16
   77 D1:A8E7 -  -  -  -  mulloop:
   78 D1:A8E7 29 -  -  -    add hl,hl
   79 D1:A8E8 CB 13 -  -    rl e
   80 D1:A8EA CB 12 -  -    rl d
   81 D1:A8EC D2 F4 A8 -    jp nc,mul0bit & $ffff
   82 D1:A8EF 09 -  -  -    add hl,bc
   83 D1:A8F0 D2 F4 A8 -    jp nc,mul0bit & $ffff
   84 D1:A8F3 13 -  -  -    inc de
   85 D1:A8F4 -  -  -  -  mul0bit:
   86 D1:A8F4 3D -  -  -    dec a
   87 D1:A8F5 C2 E7 A8 -    jp nz,mulloop & $ffff
   88 D1:A8F8 -  -  -  -  
   89 D1:A8F8 49 C9 -  -    ret.l
